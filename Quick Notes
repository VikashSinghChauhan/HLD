âš¡ Quick Numbers

HTTP POST (polling every 1s): ~500â€“1000 bytes/request â†’ 60 KB per user per minute. With 100K users â†’ ~6 GB/min traffic.

WebSocket frame: ~10â€“50 bytes per update â†’ 600 bytes/min/user. With 100K users â†’ ~60 MB/min traffic.
ðŸ‘‰ Thatâ€™s ~100x more efficient.

âœ… Rule of Thumb

If updates are frequent (sub-second to few seconds) â†’ use WebSockets (or SSE if one-way).

If updates are rare (every few mins, on demand) â†’ simple HTTP API is fine.


SSE :::::::


SSE (Server-Sent Events) keeps a persistent HTTP connection open from the client â†’ server, and the server can stream events continuously over it.

The client makes a single GET /stream request.

The server responds with Content-Type: text/event-stream and never closes the connection (unless explicitly needed).

Server keeps writing events like:

data: {"lat":12.9,"lon":77.6}
data: {"lat":12.91,"lon":77.61}


Connection stays open until:

Client closes it, or

Network/timeout happens.


Design OTT/Live stream :: https://docs.google.com/document/d/1yinOF64-w7h2Zywcq-t5yoKmpKq2YJD1QPSM7C8aFz8/edit?tab=t.0#heading=h.q14ghi85s8u3
